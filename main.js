const burger = document.getElementById("burger");
const overlay = document.getElementById("overlay");

function toggleMenu() {
  document.body.classList.toggle("menu-open");
}

burger.addEventListener("click", toggleMenu);
overlay.addEventListener("click", toggleMenu);

document.addEventListener("keyup", (e) => {
  if (e.key === "Escape" && document.body.classList.contains("menu-open")) {
    toggleMenu();
  }
});

/* === –ù–æ–≤–æ–µ: –≤—ã–¥–µ–ª—è–µ–º –ø—É–Ω–∫—Ç —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã === */
function highlightCurrent() {
  const links = document.querySelectorAll(".menu a");
  const current = location.hash
    ? location.hash // –æ–¥–Ω–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
    : location.pathname.split("/").pop() || "index.html"; // –º–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π

  links.forEach((link) => {
    const href = link.getAttribute("href");
    if (href === current || href === "#" + current.replace("#", "")) {
      link.classList.add("active");
    }
  });
}

document.addEventListener("DOMContentLoaded", highlightCurrent);

/* –±–µ—Ä—ë–º –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –±–ª–æ–∫–∞ About */
const photos = document.querySelectorAll(".about-photos .photo");

if (photos.length) {
  /* –¥–≤–∏–∂–µ–Ω–∏–µ —É—á–∏—Ç—ã–≤–∞–µ–º –ø–æ –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ */
  window.addEventListener("mousemove", (e) => {
    const xNorm = (e.clientX / window.innerWidth - 0.5) * 2; // ‚àí1 ‚Ä¶ 1
    const yNorm = (e.clientY / window.innerHeight - 0.5) * 2;

    photos.forEach((ph, i) => {
      /* –±–∞–∑–æ–≤—ã–π —Ä–∞–¥–∏—É—Å —Å–º–µ—â–µ–Ω–∏—è (px) ‚Äî –ø–æ–ø—Ä–∞–≤—å—Ç–µ –Ω–∞ —Å–≤–æ—ë —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ */
      const base = 15; // ¬´—Å–∏–ª—É¬ª —ç—Ñ—Ñ–µ–∫—Ç–∞ —Ä–µ–≥—É–ª–∏—Ä—É–µ–º –∑–¥–µ—Å—å
      const k = i === 0 ? 1.3 : 1; // —á—É—Ç—å —Ä–∞–∑–Ω–∞—è –∞–º–ø–ª–∏—Ç—É–¥–∞ –¥–ª—è –∫–∞–¥—Ä–æ–≤

      const tx = xNorm * base * k; // –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å
      const ty = yNorm * base * 0.6 * k; // –≤–µ—Ä—Ç–∏–∫–∞–ª—å (–ø–æ–º–µ–Ω—å—à–µ)

      ph.style.transform = `translate(${tx}px, ${ty}px)`;
    });
  });

  /* –ø—Ä–∏ —É—Ö–æ–¥–µ –∫—É—Ä—Å–æ—Ä–∞ –∑–∞ –æ–∫–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å—ë –Ω–∞ –º–µ—Å—Ç–æ */
  window.addEventListener("mouseout", () =>
    photos.forEach((ph) => (ph.style.transform = ""))
  );
}

const slider = new Swiper(".sale__slider", {
  loop: true,
  speed: 600,
  navigation: {
    nextEl: ".sale-nav.next",
    prevEl: ".sale-nav.prev",
  },
  slidesPerView: 1,
  effect: "slide",
  grabCursor: true,
});

function setMasonryHeights() {
  const items = document.querySelectorAll(".portfolio-item");

  items.forEach((item) => {
    const img = item.querySelector("img");
    if (img && img.complete) {
      const ratio = img.naturalHeight / img.naturalWidth;
      const rowSpan = Math.ceil(ratio * 12); /* –±—ã–ª–æ 15 - —É–º–µ–Ω—å—à–∏–ª–∏ */
      item.style.setProperty("--row-span", rowSpan);
    } else if (img) {
      img.addEventListener("load", () => {
        const ratio = img.naturalHeight / img.naturalWidth;
        const rowSpan = Math.ceil(ratio * 12); /* –±—ã–ª–æ 15 */
        item.style.setProperty("--row-span", rowSpan);
      });
    }
  });
}
document.addEventListener("DOMContentLoaded", setMasonryHeights);

/* –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ masonry –ø—Ä–∏ —Ä–µ—Å–∞–π–∑–µ */
window.addEventListener("resize", () => {
  const portfolioItems = document.querySelectorAll(".portfolio-item");
  portfolioItems.forEach((item) => {
    const img = item.querySelector("img");
    if (img) {
      // –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —ç–∫—Ä–∞–Ω–∞
      const ratio = img.naturalHeight / img.naturalWidth;
      const isMobile = window.innerWidth <= 600;
      const coefficient = isMobile ? 8 : 12;
      const rowSpan = Math.ceil(ratio * coefficient);
      item.style.setProperty("--row-span", rowSpan);
    }
  });
});

/* ========== –ó–ê–ì–†–£–ó–ö–ê –û–¢–ó–´–í–û–í ======================================= */
async function loadReviews() {
  try {
    const response = await fetch("data/reviews.json");
    if (!response.ok) throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç–∑—ã–≤—ã");

    const reviews = await response.json();
    renderReviews(reviews);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–∑—ã–≤–æ–≤:", error);
  }
}

function renderReviews(reviews) {
  const reviewsGrid = document.getElementById("reviewsGrid");
  if (!reviewsGrid) return;

  reviewsGrid.innerHTML = "";

  reviews.forEach((review) => {
    const reviewItem = document.createElement("div");
    reviewItem.className = "review-item";

    reviewItem.innerHTML = `
      <div class="review-item__author">${review.author}</div>
      <div class="review-item__text">${formatReviewText(review.text)}</div>
    `;

    reviewsGrid.appendChild(reviewItem);
  });
}

function formatReviewText(text) {
  // –∑–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –Ω–∞ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
  const paragraphs = text.split("\n\n").filter((p) => p.trim());

  return paragraphs
    .map((paragraph) => {
      // –∑–∞–º–µ–Ω—è–µ–º —ç–º–æ–¥–∑–∏ –Ω–∞ spans –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
      const formatted = paragraph
        .replace(/‚ù§Ô∏è|üíï|‚ú®|üòä|üë∂|üì∏/g, '<span class="emoji">$&</span>')
        .trim();

      return `<p>${formatted}</p>`;
    })
    .join("");
}

/* –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã */
document.addEventListener("DOMContentLoaded", () => {
  loadReviews();
});

/* ==========================================
   –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –ø—Ä–µ–≤—å—é —Å –ª–∞–π—Ç–±–æ–∫—Å–æ–º
   ========================================== */

class PortfolioPreview {
  constructor() {
    this.PATH = "img/portfolio/";
    this.LIST = "list.json";
    this.previewGrid = document.getElementById("previewGrid");
    this.lightbox = document.getElementById("portfolioLightbox");
    this.lightboxImage = document.getElementById("lightboxImage");
    this.photos = [];
    this.currentIndex = 0;

    this.init();
  }

  async init() {
    await this.loadPhotos();
    this.renderPreview();
    this.bindLightboxEvents();
  }

  async loadPhotos() {
    try {
      const response = await fetch(`${this.PATH}${this.LIST}`);
      const data = await response.json();
      this.photos = data.slice(0, 7); // –±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 7 —Ñ–æ—Ç–æ
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ:", error);
    }
  }

  renderPreview() {
    if (!this.previewGrid || this.photos.length === 0) return;

    this.previewGrid.innerHTML = "";

    this.photos.forEach((photo, index) => {
      const item = this.createPhotoItem(photo, index);
      this.previewGrid.appendChild(item);
    });

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—ã –¥–ª—è masonry –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    this.setMasonryHeights();
  }

  createPhotoItem(photo, index) {
    const item = document.createElement("div");
    item.className = "portfolio-item";
    item.style.cursor = "pointer";

    const img = document.createElement("img");
    img.src = `${this.PATH}${photo.file}`;
    img.alt = photo.title;
    img.onload = () => this.setItemHeight(item, img);

    const overlay = document.createElement("div");
    overlay.className = "portfolio-item__overlay";
    overlay.innerHTML = `
      <h3 class="portfolio-item__title">${photo.title}</h3>
      <span class="portfolio-item__category">${photo.category}</span>
    `;

    item.appendChild(img);
    item.appendChild(overlay);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ª–∞–π—Ç–±–æ–∫—Å–∞
    item.addEventListener("click", () => this.openLightbox(index));

    return item;
  }

  setItemHeight(item, img) {
    if (img.complete && img.naturalWidth && img.naturalHeight) {
      const ratio = img.naturalHeight / img.naturalWidth;
      const isMobile = window.innerWidth <= 600;
      const coefficient = isMobile ? 8 : 12;
      const rowSpan = Math.ceil(ratio * coefficient);
      item.style.setProperty("--row-span", rowSpan);
    }
  }

  setMasonryHeights() {
    const items = this.previewGrid.querySelectorAll(".portfolio-item");
    items.forEach((item) => {
      const img = item.querySelector("img");
      if (img) {
        this.setItemHeight(item, img);
      }
    });
  }

  bindLightboxEvents() {
    const closeBtn = document.getElementById("lightboxClose");
    const prevBtn = document.getElementById("lightboxPrev");
    const nextBtn = document.getElementById("lightboxNext");
    const overlay = this.lightbox.querySelector(".portfolio-lightbox__overlay");

    closeBtn.addEventListener("click", () => this.closeLightbox());
    prevBtn.addEventListener("click", () => this.prevPhoto());
    nextBtn.addEventListener("click", () => this.nextPhoto());
    overlay.addEventListener("click", () => this.closeLightbox());

    // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    document.addEventListener("keydown", (e) => {
      if (this.lightbox.classList.contains("active")) {
        switch (e.key) {
          case "Escape":
            this.closeLightbox();
            break;
          case "ArrowLeft":
            this.prevPhoto();
            break;
          case "ArrowRight":
            this.nextPhoto();
            break;
        }
      }
    });
  }

  openLightbox(index) {
    this.currentIndex = index;
    this.updateLightboxImage();
    this.lightbox.classList.add("active");
    document.body.style.overflow = "hidden";
  }

  closeLightbox() {
    this.lightbox.classList.remove("active");
    document.body.style.overflow = "";
  }

  prevPhoto() {
    this.currentIndex =
      (this.currentIndex - 1 + this.photos.length) % this.photos.length;
    this.updateLightboxImage();
  }

  nextPhoto() {
    this.currentIndex = (this.currentIndex + 1) % this.photos.length;
    this.updateLightboxImage();
  }

  updateLightboxImage() {
    const photo = this.photos[this.currentIndex];
    this.lightboxImage.src = `${this.PATH}${photo.file}`;
    this.lightboxImage.alt = photo.title;
  }
}

/* ========== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ======================================== */
document.addEventListener("DOMContentLoaded", () => {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ —Ç–æ–ª—å–∫–æ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
  if (document.getElementById("previewGrid")) {
    new PortfolioPreview();
  }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ masonry –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
window.addEventListener("resize", () => {
  const previewGrid = document.getElementById("previewGrid");
  if (previewGrid) {
    const items = previewGrid.querySelectorAll(".portfolio-item");
    items.forEach((item) => {
      const img = item.querySelector("img");
      if (img && img.complete) {
        const ratio = img.naturalHeight / img.naturalWidth;
        const isMobile = window.innerWidth <= 600;
        const coefficient = isMobile ? 8 : 12;
        const rowSpan = Math.ceil(ratio * coefficient);
        item.style.setProperty("--row-span", rowSpan);
      }
    });
  }
});
